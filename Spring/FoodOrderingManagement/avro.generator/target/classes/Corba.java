/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package tr.com.siparis.sistemi.kafka.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Corba extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Corba\",\"namespace\":\"tr.com.siparis.sistemi.kafka.model\",\"fields\":[{\"name\":\"corbaAdi\",\"type\":[\"null\",\"string\"]},{\"name\":\"corbaId\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence corbaAdi;
  @Deprecated public int corbaId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Corba() {}

  /**
   * All-args constructor.
   */
  public Corba(java.lang.CharSequence corbaAdi, java.lang.Integer corbaId) {
    this.corbaAdi = corbaAdi;
    this.corbaId = corbaId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return corbaAdi;
    case 1: return corbaId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: corbaAdi = (java.lang.CharSequence)value$; break;
    case 1: corbaId = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'corbaAdi' field.
   */
  public java.lang.CharSequence getCorbaAdi() {
    return corbaAdi;
  }

  /**
   * Sets the value of the 'corbaAdi' field.
   * @param value the value to set.
   */
  public void setCorbaAdi(java.lang.CharSequence value) {
    this.corbaAdi = value;
  }

  /**
   * Gets the value of the 'corbaId' field.
   */
  public java.lang.Integer getCorbaId() {
    return corbaId;
  }

  /**
   * Sets the value of the 'corbaId' field.
   * @param value the value to set.
   */
  public void setCorbaId(java.lang.Integer value) {
    this.corbaId = value;
  }

  /** Creates a new Corba RecordBuilder */
  public static tr.com.siparis.sistemi.kafka.model.Corba.Builder newBuilder() {
    return new tr.com.siparis.sistemi.kafka.model.Corba.Builder();
  }
  
  /** Creates a new Corba RecordBuilder by copying an existing Builder */
  public static tr.com.siparis.sistemi.kafka.model.Corba.Builder newBuilder(tr.com.siparis.sistemi.kafka.model.Corba.Builder other) {
    return new tr.com.siparis.sistemi.kafka.model.Corba.Builder(other);
  }
  
  /** Creates a new Corba RecordBuilder by copying an existing Corba instance */
  public static tr.com.siparis.sistemi.kafka.model.Corba.Builder newBuilder(tr.com.siparis.sistemi.kafka.model.Corba other) {
    return new tr.com.siparis.sistemi.kafka.model.Corba.Builder(other);
  }
  
  /**
   * RecordBuilder for Corba instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Corba>
    implements org.apache.avro.data.RecordBuilder<Corba> {

    private java.lang.CharSequence corbaAdi;
    private int corbaId;

    /** Creates a new Builder */
    private Builder() {
      super(tr.com.siparis.sistemi.kafka.model.Corba.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(tr.com.siparis.sistemi.kafka.model.Corba.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.corbaAdi)) {
        this.corbaAdi = data().deepCopy(fields()[0].schema(), other.corbaAdi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.corbaId)) {
        this.corbaId = data().deepCopy(fields()[1].schema(), other.corbaId);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Corba instance */
    private Builder(tr.com.siparis.sistemi.kafka.model.Corba other) {
            super(tr.com.siparis.sistemi.kafka.model.Corba.SCHEMA$);
      if (isValidValue(fields()[0], other.corbaAdi)) {
        this.corbaAdi = data().deepCopy(fields()[0].schema(), other.corbaAdi);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.corbaId)) {
        this.corbaId = data().deepCopy(fields()[1].schema(), other.corbaId);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'corbaAdi' field */
    public java.lang.CharSequence getCorbaAdi() {
      return corbaAdi;
    }
    
    /** Sets the value of the 'corbaAdi' field */
    public tr.com.siparis.sistemi.kafka.model.Corba.Builder setCorbaAdi(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.corbaAdi = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'corbaAdi' field has been set */
    public boolean hasCorbaAdi() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'corbaAdi' field */
    public tr.com.siparis.sistemi.kafka.model.Corba.Builder clearCorbaAdi() {
      corbaAdi = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'corbaId' field */
    public java.lang.Integer getCorbaId() {
      return corbaId;
    }
    
    /** Sets the value of the 'corbaId' field */
    public tr.com.siparis.sistemi.kafka.model.Corba.Builder setCorbaId(int value) {
      validate(fields()[1], value);
      this.corbaId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'corbaId' field has been set */
    public boolean hasCorbaId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'corbaId' field */
    public tr.com.siparis.sistemi.kafka.model.Corba.Builder clearCorbaId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Corba build() {
      try {
        Corba record = new Corba();
        record.corbaAdi = fieldSetFlags()[0] ? this.corbaAdi : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.corbaId = fieldSetFlags()[1] ? this.corbaId : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
