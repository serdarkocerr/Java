 1.using config server.

create microservice:
 - go to spring initializr, select latest released version, spring web, devtools, actuator and config client dependencies.
 - import to your ide
 - one of the important recommendations that full path of project location does not have any space in full path. The space can cause problems for microservices.
 	( /home/serdar/github/JavaCalismalari/JavaCalismalari/Spring/RestAndMicroservice/microservices/limits-service)
 - define config server in properties
 
 --------------- CLOUD CONFIG SERVER -----------
 - create Centralized Configuration Server microservice project and select devtools, config server (Central management for configuration via Git, SVN, or HashiCorp Vault) generate
 - set port on application.properties --> server.port=8888
 - create local git repository(git-localconfig-repo) for store config files and create config file limits-service.properties inside.
 	limits-service microservice will read limits-service.properties values from git repo over spring-cloud microservice (spring.config.import=optional:configserver:http://localhost:8888)
 	and set Confuguration Component attributes from config file. @ConfigurationProperties("limits-service")
 - set 	application.properties of limits microservice name ==> spring.application.name=limits-service to determine which config belong to in git. (limits-service.properties)  
 
 - define git location to spring cloud config server  application.properties (spring.cloud.config.server.git.uri=file:///home/serdar/github/JavaCalismalari/JavaCalismalari/Spring/RestAndMicroservice/microservices/git-localconfig-repo)
 - go to ` http://localhost:8888/limits-service/default `
 ----------------------------------------------
 
 ------ Configuring  profiles for limits microservice --------
 -applications may need configuretion for different environments such as dev or qa.
 -save  profile info to application.properties as  spring.profiles.active=dev
 
 -create  limits-service-dev.properties
 		  limit-services-qa.properties 	in git local repo
 go to 	http://localhost:8888/limits-service/default
 	  	http://localhost:8888/limits-service/dev
 	  	http://localhost:8888/limits-service/qa	
 	  	
 ------------------------------------------------------------------
 
 2.currency conversion microservice --> currency exchange microservice --> Database implementation  (with naming service and api gateway)
 
 ------------ Spring Currency Exchance Microservice (X 3)---------------
 - go to spring initializr, select latest stable released version, spring web, devtools, actuator and config client dependencies.
 - create CurrencyExchange Controller and retrieve json to client
 - retrive data from database and service data as Rest 
 
 
  ------------ Spring Currency conversion Microservice---------------
  - go to spring initializr, select latest stable released version, spring web, devtools, actuator and config client dependencies.
 - create CurrencyConverison Controller to calculate currency from json data that is retrieved as response from Currency Exchance Microservice using get request 

 - use FEIGN for calling microservices :
 	- add @EnableFeignClients to service (CurrencyConversionServiceApplication)
 	- add @FeignClient(name = "currency-exchange",url = "localhost:8000" ) to proxy interface
 	- add method to interface (note that this method same as CurrencyExhangeController retriveExchange method except returning object but returning object 
 		should same structure or contain/matching  structure because spring automaticly match response json to object)
 		@GetMapping("/currency-exchange/from/{from}/to/{to}")
		public CurrencyConversion retriveExchange(@PathVariable String from, @PathVariable String to) {
		
		}
		
------------ Naming Server - EUREKA--------------
 -EUREKA is naming server and loadbalancer. You have to use with Feign
 
 -@FeignClient(name = "currency-exchange",url = "localhost:8000" ) url is static and if url change, you have to change configration so that one of the reasons
  	to use naming server. Microservices should register to naming server. 
 - go to spring initializr, select latest stable released version, devtools, actuator and eureka server dependencies.
 - add @EnableEurekaServer annotation.
 - application.properties 
 	eureka.client.register-with-eureka=false
	eureka.client.fetch-registry=false
 - go to http://localhost:8761/
 - add eureka client dependencies to clients pom.xml because of connecting to naming server
 		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
 - add clients properties below
 	eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka		
 	eureka.instance.hostname=localhost
 	eureka.instance.prefer.ip-address=true
 - if you want to use as loadbalancer, you should remove url = "localhost:8000"  from @FeignClient(name = "currency-exchange",url = "localhost:8000" ) 
 	@FeignClient(name = "currency-exchange") correct. 
 
------------ API Gateway --------------
 - older spring version use Zul but newest use spring cloud gateway
 - go to spring initializr, select latest stable released version, devtools, actuator and eureka client, gateway dependencies.
 - gateway api  provide to access microservies over gateway microservice.
 	- http://{gateway_ip}:{gateway_port}/{microservice_name}/{microservice_controller_mapping_access_url}
 	- http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/TRY/quantity/10
 	- http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/TRY
 - It allows to define custom specific route to uri. (RouteLocator)
 	http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/TRY/quantity/10 is very long so you can define route.
 	comment out  discovery.locatior.enabled and discovery.locator.lowerCaseServiceId
 	go using gateway uri (http://localhost:8765) and route:
 		- http://localhost:8765/currency-exchange/from/USD/to/TRY
 		- http://localhost:8765/currency-conversion/from/USD/to/TRY/quantity/10
 		- http://localhost:8765/currency-conversion-feign/from/USD/to/TRY/quantity/10
 		- http://localhost:8765/currency-conversion-new/from/USD/to/TRY/quantity/10
 		
 
 3.
 ------------ Circuit Breaker - Resilience4j --------------
 It provide to break microservice call , If a microservices not running and one of other service that call from this not running or slow microservice.
 
 - adding currency-excange service's pom.xml --> aop
 - create CircuitBreakerController 
 	resilience4j provide framework to use circuit breaker pattern.
 	@Retry(name="sample-api") --> show  retry time config  and defined in  application.properties 
 	
 	@CircuitBreaker(name = "sample-api", fallbackMethod = "hardcoddedResponse") 
 	
 	run watch -n  0.1 curl http://localhost:8000/sample-api cmd in terminal, and watch the circuite breaker behaviour. It will stop the calling microservice rest uri.
 	
 	@RateLimiter(name = "default") // for example in 10 sec. I want to allow 2 calls to this sample-api
 	resilience4j.ratelimiter.instances.default.limitForPeriod=2
	resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
 	
4. 
-------------- Zipkin Distrubuted Tracing System ----------------

api-gateway	----->	Currency Conversion Microservice	----> 	Currency Exchange Microservice
	-						-											-
	 -						-										   -
	  -						-										 -
	   ->					->										<-
	   					RABBIT MQ
	   						-
	   						-
	   				Distrubuted Tracing Server
	   						-
	   						-
	   					Database		
	   
download openzipkin and run
 docker run -p 9411:9411 openzipkin/zipkin:2.23
 - go to http://localhost:9411/zipkin/
 
Connect  api-gateway, currency-exchange and currency-conversion service to zipkin:

add dependencies:

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit</artifactId>
		</dependency>		

---- Without Rabbit MQ -----
application.properties :
	spring.sleuth.sampler.probability=1.0 

go to :
	-http://localhost:8765/currency-exchange/from/USD/to/TRY
	-http://localhost:8100/currency-conversion-feign/from/USD/to/TRY/quantity/10
	-http://localhost:8000/currency-exchange/from/USD/to/TRY
	
run services and  go to http://localhost:9411/zipkin/ , click Run Query

view requests on zipkin UI.

-------------------------- 
---- With Rabbit MQ ------
 What if Zipkin gone or not running? you should your trace in mq like rabbitMQ 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 