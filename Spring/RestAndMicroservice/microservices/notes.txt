 1.using config server.

create microservice:
 - go to spring initializr, select latest released version, spring web, devtools, actuator and config client dependencies.
 - import to your ide
 - one of the important recommendations that full path of project location does not have any space in full path. The space can cause problems for microservices.
 	( /home/serdar/github/JavaCalismalari/JavaCalismalari/Spring/RestAndMicroservice/microservices/limits-service)
 - define config server in properties
 
 --------------- CLOUD CONFIG SERVER -----------
 - create Centralized Configuration Server microservice project and select devtools, config server (Central management for configuration via Git, SVN, or HashiCorp Vault) generate
 - set port on application.properties --> server.port=8888
 - create local git repository(git-localconfig-repo) for store config files and create config file limits-service.properties inside.
 	limits-service microservice will read limits-service.properties values from git repo over spring-cloud microservice (spring.config.import=optional:configserver:http://localhost:8888)
 	and set Confuguration Component attributes from config file. @ConfigurationProperties("limits-service")
 - set 	application.properties of limits microservice name ==> spring.application.name=limits-service to determine which config belong to in git. (limits-service.properties)  
 
 - define git location to spring cloud config server  application.properties (spring.cloud.config.server.git.uri=file:///home/serdar/github/JavaCalismalari/JavaCalismalari/Spring/RestAndMicroservice/microservices/git-localconfig-repo)
 - go to ` http://localhost:8888/limits-service/default `
 ----------------------------------------------
 
 ------ Configuring  profiles for limits microservice --------
 -applications may need configuretion for different environments such as dev or qa.
 -save  profile info to application.properties as  spring.profiles.active=dev
 
 -create  limits-service-dev.properties
 		  limit-services-qa.properties 	in git local repo
 go to 	http://localhost:8888/limits-service/default
 	  	http://localhost:8888/limits-service/dev
 	  	http://localhost:8888/limits-service/qa	
 	  	
 ------------------------------------------------------------------
 
 2.currency conversion microservice --> currency exchange microservice --> Database implementation  (with naming service and api gateway)
 
 ------------ Spring Currency Exchance Microservice (X 3)---------------
 - go to spring initializr, select latest stable released version, spring web, devtools, actuator and config client dependencies.
 - create CurrencyExchange Controller and retrieve json to client
 - retrive data from database and service data as Rest 
 
 
  ------------ Spring Currency conversion Microservice---------------
  - go to spring initializr, select latest stable released version, spring web, devtools, actuator and config client dependencies.
 - create CurrencyConverison Controller to calculate currency from json data that is retrieved as response from Currency Exchance Microservice using get request 

 - use FEIGN for calling microservices :
 	- add @EnableFeignClients to service (CurrencyConversionServiceApplication)
 	- add @FeignClient(name = "currency-exchange",url = "localhost:8000" ) to proxy interface
 	- add method to interface (note that this method same as CurrencyExhangeController retriveExchange method except returning object but returning object 
 		should same structure or contain/matching  structure because spring automaticly match response json to object)
 		@GetMapping("/currency-exchange/from/{from}/to/{to}")
		public CurrencyConversion retriveExchange(@PathVariable String from, @PathVariable String to) {
		
		}
		
------------ Naming Server - EUREKA--------------
 -EUREKA is naming server and loadbalancer. You have to use with Feign
 
 -@FeignClient(name = "currency-exchange",url = "localhost:8000" ) url is static and if url change, you have to change configration so that one of the reasons
  	to use naming server. Microservices should register to naming server. 
 - go to spring initializr, select latest stable released version, devtools, actuator and eureka server dependencies.
 - add @EnableEurekaServer annotation.
 - application.properties 
 	eureka.client.register-with-eureka=false
	eureka.client.fetch-registry=false
 - go to http://localhost:8761/
 - add eureka client dependencies to clients pom.xml because of connecting to naming server
 		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
 - add clients properties below
 	eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka		
 	eureka.instance.hostname=localhost
 	eureka.instance.prefer.ip-address=true
 - if you want to use as loadbalancer, you should remove url = "localhost:8000"  from @FeignClient(name = "currency-exchange",url = "localhost:8000" ) 
 	@FeignClient(name = "currency-exchange") correct. 
 
------------ API Gateway --------------
 - older spring version use Zul but newest use spring cloud gateway
 - go to spring initializr, select latest stable released version, devtools, actuator and eureka client, gateway dependencies.
 - gateway api  provide to access microservies over gateway microservice.
 	- add application.properties:
 		spring.cloud.gateway.discovery.locator.enabled=true
		spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true
 	- http://{gateway_ip}:{gateway_port}/{microservice_name}/{microservice_controller_mapping_access_url}
 	- http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/TRY/quantity/10
 	- http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/TRY
 - It allows to define custom specific route to uri. (RouteLocator)
 	http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/TRY/quantity/10 is very long so you can define route.
 	comment out  discovery.locatior.enabled and discovery.locator.lowerCaseServiceId
 	create ApiGatewayConfiguration config class and define RouteLocator bean.
 	go using gateway uri (http://localhost:8765) and route:
 		- http://localhost:8765/currency-exchange/from/USD/to/TRY
 		- http://localhost:8765/currency-conversion/from/USD/to/TRY/quantity/10
 		- http://localhost:8765/currency-conversion-feign/from/USD/to/TRY/quantity/10
 		- http://localhost:8765/currency-conversion-new/from/USD/to/TRY/quantity/10
 		
 
 3.
 ------------ Circuit Breaker - Resilience4j --------------
 It provide to break microservice call , If a microservices not running and one of other service that call from this not running or slow microservice.
 
 - adding currency-excange service's pom.xml --> aop
 - create CircuitBreakerController 
 	resilience4j provide framework to use circuit breaker pattern.
 	@Retry(name="sample-api") --> show  retry time config  and defined in  application.properties 
 	
 	@CircuitBreaker(name = "sample-api", fallbackMethod = "hardcoddedResponse") 
 	
 	run watch -n  0.1 curl http://localhost:8000/sample-api cmd in terminal, and watch the circuite breaker behaviour. It will stop the calling microservice rest uri.
 	
 	@RateLimiter(name = "default") // for example in 10 sec. I want to allow 2 calls to this sample-api
 	resilience4j.ratelimiter.instances.default.limitForPeriod=2
	resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
 	
4. 
-------------- Zipkin Distributed Tracing System ----------------

api-gateway	----->	Currency Conversion Microservice	----> 	Currency Exchange Microservice
	-						-											-
	 -						-										   -
	  -						-										 -
	   ->					->										<-
	   					RABBIT MQ
	   						-
	   						-
	   				Distrubuted Tracing Server
	   						-
	   						-
	   					Database		
	   
download openzipkin and run
 docker run -p 9411:9411 openzipkin/zipkin:2.23
 - go to http://localhost:9411/zipkin/
 
Connect  api-gateway, currency-exchange and currency-conversion service to zipkin:

add dependencies:

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit</artifactId>
		</dependency>		

---- Without Rabbit MQ -----
application.properties :
	spring.sleuth.sampler.probability=1.0 

go to :
	-http://localhost:8765/currency-exchange/from/USD/to/TRY
	-http://localhost:8100/currency-conversion-feign/from/USD/to/TRY/quantity/10
	-http://localhost:8000/currency-exchange/from/USD/to/TRY
	
run services and  go to http://localhost:9411/zipkin/ , click Run Query

view requests on zipkin UI.

-------------------------- 
----DOCKER CONTAINER---
This plugin helps to us create image for our container.
IF_NOT_PRESENT--> search image first locally, if not present pull from docker hub


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
					<configuration>
						<image>
							<name>serdarkocerr/mmv2-${project.artifactId}:${project.version}</name>
						</image>
						<pullPolicy>IF_NOT_PRESENT</pullPolicy>
				</configuration>
			</plugin>
		</plugins>
	</build>


Create image:
 Run as -> Maven Build... -> Goal = spring-boot:build-image -DskipTests

docker run -p 8000:8000 serdarkocerr/microservices-currency-exchange-service:0.0.1-SNAPSHOT
test --> http://localhost:8000/currency-exchange/from/USD/to/TRY

Docker compose run multiple services from yaml file. So that create docker-compose.yml file
docker-compose --version

run from yml file 
	docker-compose up

go to:
	-http://localhost:8765/currency-exchange/from/USD/to/TRY
	-http://localhost:8100/currency-conversion-feign/from/USD/to/TRY/quantity/10
	-http://localhost:8000/currency-exchange/from/USD/to/TRY
	-http://localhost:8100/currency-conversion/from/USD/to/TRY/quantity/10 --> will not work. 
		Because in controller response uri set as localhost. So you can change it
		using application.properties variable from docker image.!!
	



NOTE: eureka url in currency-exchange-server's application.properties saved as 
		 eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
	but localhost is not same currency-exchange-server container and naming-server container.
	so that you have to set as naming-server ip address or set environment in docker-compose.yml
	file to register naming-server. 
		 environment:
         EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://naming-server:8761/eureka
     Ayni durum ZIPKIN server icinde gecerlidir.
     

----------------------


---- With Rabbit MQ ------
 What if Zipkin is gone or not running? microservices can put  information to mq like rabbitMQ.
  
 Normally zipkin sendr type have to define in application.properties as
 	'spring.zipkin.sender.type=web' but default is web so that you dont have to define.
 
 If you decide to use rabbit mq, you should set
 	'spring.zipkin.sender.type=rabbit' or 
 if you use docker container, you can define environment in yaml as
 	'SPRING.ZIPKIN.SENDER.TYPE: rabbit 
 
add rabbit mq server in yaml to run RABBIT MQ in docker container.

Also add rabbit mq settings to environment in yaml file.

-----------------------------------------------------------------------
5. KUBERNATES
Run everywhere
	- AWS: Elastic Kubernetes Service
	- Azure: Azure Kubernetes Service
	- GCP: Google Kubernetes Engine (GKE)
	
We will use GCP.

Advantages: 
 - If you want 10 instance of microservice A, 15 instance of microservice B 
 - Auto Scaling: Based on load,you can manage container number up/down
 - Service Discovery: help microservices find one another
 - Load Balancer: distrubute load among multiple instances of a microservice.
 - Self Healing: Do health checks and replace faiing instance
 
go to : 
	- http://cloud.google.com 
and register Google Cloud Platform as Free Trial.	
 
Cluster : Combination of nodes and master node. 
	Master Node : manage Cluster
	Worker Node : run your application
 
go to google cloud console,
	- select My First Project
	- Open Kubernetes Engine Dashboard (could use search button)
		* Clusters ==> ability to create cluster using this.
		* Workloads ==> provide to manage apllications or containers that you want to deploy into the cluster.
		* Services & Ingress ==> Some of  your workload may be rest api or web application. This tab provide access to external world these workload. 
		* Configuration ==> store application of configurations.
		* Storage ==> provide persistence data storage for applications.
	
	- add cluster --> Name :serdarkocerr-cluster
		* Name : serdarkocerr-cluster --> Create
		
 	-!! Recommendation :::> Whnever you are actually not doing anything or trying, delete cluster
 	because you will be billed for it.
 	
 	- go cluster and open cloud shell and extend to all page.
 	- go Clusters and click connect button and save command line access command
 	- paste to cloud shell terminal screen and run to connect cluster(serdarkocerr-cluster) from cloudshell.
 	
 	- kubectl version
 	- deploy application to  kubernetes cluster and it give you a deployement ID 
 		kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE (docker image from docker hub. and deploy to our kubernetes cluster.)
 	- Expose as a service to outside world. 
 		kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080
 	- go Services & Ingress tab and see hello-world-rest-api status OK.
 		go to EndPoints http://34.134.165.87:8080
 		also GET http://34.134.165.87:8080/hello-world
 	
 	
 	When we execute kubectl create deployment command Kubernetes create a deployment, a replica set, a pod 
 	When we execute kubectl expose deployment command Kubernetes create a service for us.
 	
 	Pod: Smallest deployable unit in Kubernetes. Container can not be created without pod. A container must be inside a pod. 
 	ReplicaSet : decide number of  instance pods have to be running.
 		- kubectl get pods -o wide
 			each pod has a unique ip address.
 		 Pod can contain multiple containers. All the containers which are present ina pod , share resources. 
 		 -kubectl explain pods
 		 -kubectl describe pod hello-world-rest-api-58ff5dd898-9trh2 ==> 
 		 -kubectl get replicasets = kubectl get rs ==> show desired running pods. If pods stop and desired pods grater than running pods, Kubernates immediately run automatically missing number of pods.
 		 -kubectl scale deployment hello-world-rest-api --replicas=3 ==> create 3 pods for giving application. Check status `kubetcl get pods`
 		 -kubectl get events ---sort-by=.metada.creationTimestamp ==> sort events by creation time stamp.
 		 -kubectl explain replicaset 
 		 --- DEPLOY new version of hello-world-rest-api ----
 		 -kubectl get rs -o wide ==> check current version of image.
 		 -kubectl set image deployment hello-world-rest-api hello-world-rest-api=in28min/hello-world-rest-api.0.0.2.RELEASE ==> set image version scaled to 0.0.2.RELEASE if error exists while pulling new image, 
 		 	kubernetes continues running old image. If there is no error to  set new image , kubernetes kill old images and run new images with same replicaset configurations without downtime.
 		 	 control with `kubectl get pods`, `kubectl get rs` , `kubectl get events --sort-by=.metadata.creationTimestamp`
 		 	 GET 'http://34.134.165.87:8080/hello-world'
 		 	 
 		 	 --- DEPLOY new version of hello-world-rest-api END----
 		 
 		 -kubectl get pods -o wide ==> name, status, age,ip, and node are shown.
 		 	Although each of pods have own ip address (10.55.0.5), Users can connect Service ip address (34.134.165.87) because So Pods may down or new pods may up, Users should not be effected from this up/down.
 		 	Users could always send request same ip and port address wothout effecting pods down or up.
 		 	Search Load Balancer and see frontendt IP (34.134.165.87) also see backend 
 
 		 -kubeclt get services ==> see kubernetes services that are running.  CLusterIP(can only be accessed from inside cluster.) and LoadBalancer.
 	
 	- Search Kubernetes Engine and click Workloads. You can see name of applications. Click it and see deatil of applicaton. 
 			EDIT: view yaml file
 			ACTIONS: scale, rooling update etc.
 			REVISION HISTORY : all the history about versions and events.
 			
 	-Master Node: 
 	
 		-API Server (kube-apiserver):
 			Provide to talk commands like kubeclt with Kubernates Cluster 
 		-Distribute Database (etcd): 
 			Distributed database. all the configuration change, scaling deployment, scaling operations, all the detail of those stored in this database.
 			
 		-Scheduler (kube-schedular):
 			Responsible for scheduling the pods on the nodes. Decide using CPU, Memory etc. which node sholdu have pod and scheduled on it. 
 		-Controller Manager (kube-controller-manager):
 			Manages the helth of the cluster. 
 	
 	-Worker Node:  	User application  would be running in pods inside the worker nodes.
 		 -Node Agent (kubelet):
 		 	Reports what happened in the worker node.For example a pod is down, Node Agent reports it to controller manager of master node. 
 		 -Networking Component (kube-proxy):
 		 	Provide to manage network in worker node. (Expose etc.)
 		 -Container Runtime (CRI):
 		 	
 		 -PODS:
 		 	containers are running inside pods. Several pods could be run on worker.
 	
 	-kubectl get componentstatuses ==> get component statuses 
 
 	GCloud : provide to manage Google Kubernetes clusters from oiur local machine.
 	Kubectl: after install Gcloud , you can connect to cluster and run kubeclt commands. Provide flexibility connecting from local.
 
 
 
 
 
 